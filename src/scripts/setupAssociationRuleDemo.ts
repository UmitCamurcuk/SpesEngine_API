import mongoose from 'mongoose';
import connectDB from '../config/database';
import ItemType from '../models/ItemType';
import Association from '../models/Association';
import AssociationRule from '../models/AssociationRule';
import Category from '../models/Category';
import Family from '../models/Family';
import Localization from '../models/Localization';

/**
 * Demo Script: Sipari≈ü - Stok ƒ∞li≈ükisi i√ßin Association Rule Kurulumu
 * 
 * Bu script sizin √∂rneƒüinizi (Sipari≈ü ve Stok arasƒ±nda Kuma≈ü kullanƒ±mƒ±) kurar:
 * 1. ItemType'larƒ± olu≈üturur/bulur (Sipari≈ü, Stok)
 * 2. Association olu≈üturur (Sipari≈ü - Kuma≈ü Kullanƒ±mƒ±)
 * 3. AssociationRule olu≈üturur (kategori ve aile filtresi ile)
 */

async function setupAssociationRuleDemo() {
  try {
    console.log('üöÄ Association Rule Demo kurulumu ba≈ülatƒ±lƒ±yor...');

    // Database baƒülantƒ±sƒ±
    await connectDB();

    // 1. Localization'larƒ± olu≈ütur
    console.log('üìù Localization kayƒ±tlarƒ± olu≈üturuluyor...');
    
    const siparisNameLoc = await Localization.create({
      key: 'itemtype.siparis.name',
      translations: {
        tr: 'Sipari≈ü',
        en: 'Order'
      }
    });

    const siparisDescLoc = await Localization.create({
      key: 'itemtype.siparis.description',
      translations: {
        tr: 'M√º≈üteri sipari≈ülerini y√∂netmek i√ßin kullanƒ±lan item type',
        en: 'Item type used for managing customer orders'
      }
    });

    const stokNameLoc = await Localization.create({
      key: 'itemtype.stok.name',
      translations: {
        tr: 'Stok',
        en: 'Stock'
      }
    });

    const stokDescLoc = await Localization.create({
      key: 'itemtype.stok.description',
      translations: {
        tr: 'Depo stoklarƒ±nƒ± y√∂netmek i√ßin kullanƒ±lan item type',
        en: 'Item type used for managing warehouse stocks'
      }
    });

    // 2. Kategori olu≈ütur (Kuma≈ü kategorisi)
    console.log('üìÅ Kategori olu≈üturuluyor...');
    
    const kumasKategoriNameLoc = await Localization.create({
      key: 'category.kumas.name',
      translations: {
        tr: 'Kuma≈ü',
        en: 'Fabric'
      }
    });

    const kumasKategoriDescLoc = await Localization.create({
      key: 'category.kumas.description',
      translations: {
        tr: 'Tekstil kuma≈ülarƒ± kategorisi',
        en: 'Textile fabrics category'
      }
    });

    let kumasKategori = await Category.findOne({ code: 'KUMAS' });
    if (!kumasKategori) {
      kumasKategori = await Category.create({
        name: kumasKategoriNameLoc._id,
        code: 'KUMAS',
        description: kumasKategoriDescLoc._id,
        isActive: true
      });
    }

    // 3. Aile olu≈ütur (Pamuklu kuma≈ülar ailesi)
    console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Aile olu≈üturuluyor...');
    
    const pamukluFamilyNameLoc = await Localization.create({
      key: 'family.pamuklu.name',
      translations: {
        tr: 'Pamuklu Kuma≈ülar',
        en: 'Cotton Fabrics'
      }
    });

    const pamukluFamilyDescLoc = await Localization.create({
      key: 'family.pamuklu.description',
      translations: {
        tr: 'Pamuk i√ßerikli kuma≈ülar ailesi',
        en: 'Cotton content fabrics family'
      }
    });

    let pamukluFamily = await Family.findOne({ code: 'PAMUKLU_KUMAS' });
    if (!pamukluFamily) {
      pamukluFamily = await Family.create({
        name: pamukluFamilyNameLoc._id,
        code: 'PAMUKLU_KUMAS',
        description: pamukluFamilyDescLoc._id,
        category: kumasKategori._id,
        attributeGroups: [],
        attributes: [],
        isActive: true
      });
    }

    // 4. ItemType'larƒ± olu≈ütur
    console.log('üè∑Ô∏è ItemType\'lar olu≈üturuluyor...');

    let siparisItemType = await ItemType.findOne({ code: 'SIPARIS' });
    if (!siparisItemType) {
      siparisItemType = await ItemType.create({
        name: siparisNameLoc._id,
        code: 'SIPARIS',
        description: siparisDescLoc._id,
        category: kumasKategori._id, // Demo i√ßin aynƒ± kategori
        isActive: true
      });
    }

    let stokItemType = await ItemType.findOne({ code: 'STOK' });
    if (!stokItemType) {
      stokItemType = await ItemType.create({
        name: stokNameLoc._id,
        code: 'STOK',
        description: stokDescLoc._id,
        category: kumasKategori._id,
        isActive: true
      });
    }

    // 5. Association olu≈ütur
    console.log('üîó Association olu≈üturuluyor...');
    
    const associationNameLoc = await Localization.create({
      key: 'association.siparis_kumas_kullanimi.name',
      translations: {
        tr: 'Sipari≈ü - Kuma≈ü Kullanƒ±mƒ±',
        en: 'Order - Fabric Usage'
      }
    });

    const associationDescLoc = await Localization.create({
      key: 'association.siparis_kumas_kullanimi.description',
      translations: {
        tr: 'Sipari≈ülerde kullanƒ±lan kuma≈ülarƒ± tanƒ±mlar',
        en: 'Defines fabrics used in orders'
      }
    });

    let association = await Association.findOne({ code: 'siparis_kumas_kullanimi' });
    if (!association) {
      association = await Association.create({
        code: 'siparis_kumas_kullanimi',
        name: associationNameLoc._id,
        description: associationDescLoc._id,
        isDirectional: true,
        relationshipType: 'many-to-many',
        allowedSourceTypes: [siparisItemType._id],
        allowedTargetTypes: [stokItemType._id],
        
        // YENƒ∞: Filter Criteria - sizin istediƒüiniz √∂zellik!
        filterCriteria: {
          // Target ItemType'da (Stok) sadece kuma≈ü kategorisinden se√ßim yapƒ±labilir
          allowedTargetCategories: [kumasKategori._id],
          // Target ItemType'da (Stok) sadece pamuklu aile se√ßim yapƒ±labilir
          allowedTargetFamilies: [pamukluFamily._id],
          // Target attribute filtreleri
          targetAttributeFilters: [
            {
              attributeCode: 'stok_durumu',
              operator: 'equals',
              value: 'mevcut',
              description: 'Sadece stokta mevcut olan kuma≈ülar'
            },
            {
              attributeCode: 'kalite_onay',
              operator: 'equals',
              value: true,
              description: 'Kalite kontrol√ºnden ge√ßmi≈ü kuma≈ülar'
            }
          ]
        },
        
        metadata: {
          purpose: 'fabric_usage',
          industry: 'textile'
        }
      });
    }

    // 6. Association Rule olu≈ütur
    console.log('üìã Association Rule olu≈üturuluyor...');
    
    const ruleNameLoc = await Localization.create({
      key: 'rule.siparis_kumas_secimi.name',
      translations: {
        tr: 'Sipari≈ü Kuma≈ü Se√ßimi',
        en: 'Order Fabric Selection'
      }
    });

    const ruleDescLoc = await Localization.create({
      key: 'rule.siparis_kumas_secimi.description',
      translations: {
        tr: 'Sipari≈ü olu≈ütururken sadece kuma≈ü kategorisinden ve pamuklu kuma≈ü ailesinden se√ßim yapƒ±labilir',
        en: 'When creating orders, selection can only be made from fabric category and cotton fabric family'
      }
    });

    let associationRule = await AssociationRule.findOne({ code: 'SIPARIS_KUMAS_SECIMI' });
    if (!associationRule) {
      associationRule = await AssociationRule.create({
        code: 'SIPARIS_KUMAS_SECIMI',
        name: ruleNameLoc._id,
        description: ruleDescLoc._id,
        associationId: association._id,
        sourceItemTypeId: siparisItemType._id,
        targetItemTypeId: stokItemType._id,
        relationshipType: 'many-to-many',
        
        // Filtreleme kriterleri - Bu sizin isteƒüiniz!
        filterCriteria: {
          categories: [kumasKategori._id], // Sadece kuma≈ü kategorisinden
          families: [pamukluFamily._id],   // Sadece pamuklu kuma≈ü ailesinden
          attributeFilters: [
            {
              attributeCode: 'stok_durumu',
              operator: 'equals',
              value: 'mevcut'
            },
            {
              attributeCode: 'kalite_onay',
              operator: 'equals', 
              value: true
            }
          ]
        },

        // Validation kurallarƒ±
        validationRules: [
          {
            type: 'required',
            value: true,
            message: 'En az bir kuma≈ü se√ßimi zorunludur'
          },
          {
            type: 'minCount',
            value: 1,
            message: 'Minimum 1 kuma≈ü se√ßilmelidir'
          },
          {
            type: 'maxCount',
            value: 10,
            message: 'Maximum 10 kuma≈ü se√ßilebilir'
          }
        ],

        // UI konfig√ºrasyonu
        uiConfig: {
          displayMode: 'table',
          allowMultiSelect: true,
          allowInlineCreate: false,
          allowInlineEdit: false,
          showInList: true,
          showInDetail: true,
          showSearchBox: true,
          showFilters: true,
          pageSize: 20,
          sortBy: 'name',
          sortOrder: 'asc',
          displayColumns: [
            {
              attributeCode: 'name',
              displayName: 'Kuma≈ü Adƒ±',
              width: 200,
              sortable: true
            },
            {
              attributeCode: 'code',
              displayName: 'Kuma≈ü Kodu',
              width: 150,
              sortable: true
            },
            {
              attributeCode: 'stok_miktari',
              displayName: 'Stok Miktarƒ±',
              width: 120,
              sortable: true
            },
            {
              attributeCode: 'birim_fiyat',
              displayName: 'Birim Fiyat',
              width: 120,
              sortable: true
            }
          ]
        },

        priority: 10,
        isActive: true,
        isRequired: true,
        cascadeDelete: false,
        createdBy: new mongoose.Types.ObjectId(), // Demo user ID
        updatedBy: new mongoose.Types.ObjectId()  // Demo user ID
      });
    }

    // 7. ItemType'a association rule'u ekle
    console.log('üîó ItemType\'a association rule baƒülanƒ±yor...');
    
    await ItemType.findByIdAndUpdate(siparisItemType._id, {
      $addToSet: { associationIds: association._id }
    });

    console.log('‚úÖ Demo kurulumu tamamlandƒ±!');
    console.log('\nüìä Olu≈üturulan kayƒ±tlar:');
    console.log(`- Sipari≈ü ItemType: ${siparisItemType.code}`);
    console.log(`- Stok ItemType: ${stokItemType.code}`);
    console.log(`- Kuma≈ü Kategorisi: ${kumasKategori.code}`);
    console.log(`- Pamuklu Kuma≈ü Ailesi: ${pamukluFamily.code}`);
    console.log(`- Association: ${association.code}`);
    console.log(`- Association Rule: ${associationRule.code}`);

    console.log('\nüîß Kullanƒ±m Se√ßenekleri:');
    console.log('\nüìù SE√áENEK 1: Association Rule ile (daha geli≈ümi≈ü):');
    console.log('1. Association rule √ßaƒüƒ±rƒ±n:');
    console.log(`   GET /api/association-rules/SIPARIS_KUMAS_SECIMI/items/{siparisItemId}`);
    console.log('2. Association olu≈üturmak i√ßin:');
    console.log(`   POST /api/association-rules/SIPARIS_KUMAS_SECIMI/associate/{siparisItemId}`);

    console.log('\nüéØ SE√áENEK 2: Direkt Association Filter ile (sizin istediƒüiniz):');
    console.log('1. Association filter criteria √ßaƒüƒ±rƒ±n:');
    console.log(`   GET /api/associations/${association._id}/filtered-items/{siparisItemId}`);
    console.log('2. Sadece kuma≈ü kategorisi ve pamuklu aile filtrelenmi≈ü stoklar gelecek');
    console.log('3. Normal association olu≈üturmak i√ßin:');
    console.log(`   POST /api/items/{siparisItemId}/associations/create`);

    console.log('\nüí° Frontend\'de kullanƒ±m:');
    console.log('```jsx');
    console.log('// Yeni Association olu≈ütururken filter criteria belirleyin:');
    console.log('<EnhancedAssociationCreator');
    console.log('  open={isOpen}');
    console.log('  onAssociationCreated={handleCreated}');
    console.log('/>');
    console.log('');
    console.log('// Association kullanƒ±rken filtrelenmi≈ü item\'larƒ± g√∂sterin:');
    console.log('<FilteredItemSelector');
    console.log('  sourceItemId={siparisId}');
    console.log('  associationId={associationId}');
    console.log('  onItemsSelected={handleSelection}');
    console.log('/>');
    console.log('```');

  } catch (error) {
    console.error('‚ùå Demo kurulumu sƒ±rasƒ±nda hata:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Database baƒülantƒ±sƒ± kapatƒ±ldƒ±');
  }
}

// Script'i √ßalƒ±≈ütƒ±r
if (require.main === module) {
  setupAssociationRuleDemo();
}

export default setupAssociationRuleDemo;
